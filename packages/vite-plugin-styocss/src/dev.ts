import { isAbsolute, resolve } from 'node:path'
import { writeFile } from 'fs/promises'
import type { Plugin as VitePlugin, ViteDevServer } from 'vite'
import { normalizePath } from 'vite'
import { resolveModule } from 'local-pkg'
import { resolveId } from './shared'
import { createFunctionCallTransformer } from './shared/transformer'
import type { StyoPluginContext } from './shared/types'
import { renderRules } from './shared/renderer'

const WS_HMR_INJECTED_EVENT = 'styocss:virtual-css-hmr-injected'
const WS_UPDATE_EVENT = 'styocss:virtual-css-update'

export function DevPlugin (ctx: StyoPluginContext): VitePlugin[] {
  let hmrInjected = false
  let server: ViteDevServer | null = null
  const entries = new Set<string>()

  function sendUpdate () {
    if (server && hmrInjected) {
      const css = renderRules(ctx.styo)
      server.ws.send({
        type: 'custom',
        event: WS_UPDATE_EVENT,
        data: {
          css,
        },
      })
    }
  }

  const plugins: VitePlugin[] = [
    {
      name: 'styocss:dev:function-call-transform',
      enforce: 'pre',
      apply: 'serve',
      transform: createFunctionCallTransformer(ctx),
    },
    {
      name: 'styocss:dev:virtual-css',
      enforce: 'pre',
      apply: 'serve',
      configureServer (_server) {
        server = _server

        server.ws.on(WS_HMR_INJECTED_EVENT, () => {
          hmrInjected = true
          sendUpdate()
        })
        ctx.styo.onAtomicStyoRuleRegistered(() => {
          sendUpdate()
        })
      },
      resolveId (id) {
        if (resolveId(id)) {
          entries.add(id)
          return id
        }
      },
      load (id) {
        if (resolveId(id))
          return ''
      },
    },
    {
      name: 'styocss:dev:virtual-css-hmr-injection',
      apply (config, env) {
        return env.command === 'serve' && !config.build?.ssr
      },
      enforce: 'post',
      transform (code, id) {
        // inject css modules to send callback on css load
        if (resolveId(id) && code.includes('import.meta.hot')) {
          return `${code}
if (import.meta.hot) {
  import.meta.hot.on('${WS_UPDATE_EVENT}', ({ css }) => {
    console.log(css)
    __vite__updateStyle(__vite__id, css)
  })
  import.meta.hot.send('${WS_HMR_INJECTED_EVENT}')
}`
        }
      },
    },
  ]

  if (ctx.dts) {
    plugins.push({
      name: 'styocss:dev:dts',
      configResolved (config) {
        if (ctx.dts === false)
          return

        const { root } = config

        const normalizedDts = normalizePath(ctx.dts)
        const dtsPath = isAbsolute(normalizedDts)
          ? normalizedDts
          : resolve(root, normalizedDts)

        const { nameOfStyleFn } = ctx
        const nestedWithTemplates = [...ctx.styo.nestedWithTemplateSet].map((n) => `'${n}'`)
        const selectorTemplates = [...ctx.styo.selectorTemplateSet].map((n) => `'${n}'`)
        const macroUtilityNamesOrTemplates = [...ctx.styo.registeredMacroStyoRuleMap]
          .map(([key, val]) => {
            if ('template' in val)
              return `'${val.template}'`

            return `'${key}'`
          })

        const hasVue = resolveModule('vue', { paths: [root] })
        const dtsContent = [
          '// Auto-generated by @styocss/vite-plugin',
          'import type { StyoInstance } from \'@styocss/core\'',
          '',
          'type StyleFn = StyoInstance<',
          `  ${nestedWithTemplates.length > 0 ? nestedWithTemplates.join(' | ') : 'never'},`,
          `  ${selectorTemplates.length > 0 ? selectorTemplates.join(' | ') : 'never'},`,
          `  ${macroUtilityNamesOrTemplates.length > 0 ? macroUtilityNamesOrTemplates.join(' | ') : 'never'},`,
          '>[\'style\']',
          '',
          'declare global {',
          `  const ${nameOfStyleFn}: StyleFn`,
          '}',
          ...hasVue
            ? [
                '',
                'declare module \'vue\' {',
                '  interface ComponentCustomProperties {',
            `    ${nameOfStyleFn}: StyleFn`,
            '  }',
            '}',
              ]
            : [],
        ].join('\n')
        writeFile(dtsPath, dtsContent)
      },
    })
  }

  return plugins
}
