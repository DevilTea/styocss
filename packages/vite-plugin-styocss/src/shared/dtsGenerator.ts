import * as prettier from 'prettier'
import type { StyoEngine } from '@styocss/core'
import type { StyoPluginContext } from './types'

function formatUnionType(types: string[]) {
	return types.length > 0 ? types.join(' | ') : 'never'
}

async function generateStyoFnOverload(
	ctx: StyoPluginContext,
	params: (Parameters<StyoEngine['styo']>),
) {
	const prettified = await prettier.format(ctx.engine.previewStyo(...params), { parser: 'css' })
	return [
		'/**',
		' * StyoCSS Preview',
		' * ```css',
		...prettified.split('\n').map(line => ` * â€Ž${line}`),
		' * ```',
		' */',
		`declare function ${ctx.nameOfStyoFn}(...params: ${JSON.stringify(params)}): ReturnType<StyoFn>`,
	]
}

export async function generateDtsContent(ctx: StyoPluginContext) {
	const {
		engine,
		autoJoin,
		nameOfStyoFn,
		usages,
		hasVue,
	} = ctx
	const aliasForNestingList = [
		...engine.staticAliasForNestingRuleList.map(({ alias }) => alias),
		...engine.dynamicAliasForNestingRuleList.flatMap(({ predefined }) => predefined),
	].map(alias => `'${alias}'`)
	const aliasForNestingTemplateList = [
		...engine.dynamicAliasForNestingRuleList.flatMap(({ template }) => template),
	].map(template => `'${template}'`)
	const aliasForSelectorList = [
		...engine.staticAliasForSelectorRuleList.map(({ alias }) => alias),
		...engine.dynamicAliasForSelectorRuleList.flatMap(({ predefined }) => predefined),
	].map(alias => `'${alias}'`)
	const aliasForSelectorTemplateList = [
		...engine.dynamicAliasForSelectorRuleList.flatMap(({ template }) => template),
	].map(template => `'${template}'`)
	const shortcutList = [
		...engine.staticShortcutRuleList.map(({ name }) => name),
		...engine.dynamicShortcutRuleList.flatMap(({ predefined }) => predefined),
	].map(name => `'${name}'`)
	const shortcutTemplateList = [
		...engine.dynamicShortcutRuleList.flatMap(({ template }) => template),
	].map(template => `'${template}'`)

	const lines = []
	lines.push(...[
		'// Auto-generated by @styocss/vite-plugin-styocss',
		'import type { StyoEngine } from \'@styocss/vite-plugin-styocss\'',
		'',
		'type _StyoFn = StyoEngine<',
		`  /* AliasForNesting */ ${formatUnionType(aliasForNestingList)},`,
		`  /* AliasForNestingTemplate */ ${formatUnionType(aliasForNestingTemplateList)},`,
		`  /* AliasForSelector */ ${formatUnionType(aliasForSelectorList)},`,
		`  /* AliasForSelectorTemplate */ ${formatUnionType(aliasForSelectorTemplateList)},`,
		`  /* Shortcut */ ${formatUnionType(shortcutList)},`,
		`  /* ShortcutTemplate */ ${formatUnionType(shortcutTemplateList)},`,
		'>[\'styo\']',
		'',
	])

	if (autoJoin) {
		lines.push(...[
			'type StyoFn = (...params: Parameters<_StyoFn>) => string',
			'',
		])
	}
	else {
		lines.push(...[
			'type StyoFn = _StyoFn',
			'',
		])
	}

	lines.push(...[
		'declare global {',
		`  ${nameOfStyoFn}`,
		'}',
		'',
	])

	if (hasVue) {
		lines.push(...[
			'declare module \'vue\' {',
			'  interface ComponentCustomProperties {',
			`    ${nameOfStyoFn}: typeof ${nameOfStyoFn}`,
			'  }',
			'}',
			'',
		])
	}

	lines.push(...[
		'// Preview Overloads',
	])
	lines.push(
		...(await Promise.all([...usages.values()].flat().map(params => generateStyoFnOverload(ctx, params))))
			.flat(),
	)

	lines.push(...[
		'/**',
		' * StyoCSS Preview',
		' * Save this file to see the preview.',
		' */',
		`declare function ${nameOfStyoFn}(...params: Parameters<StyoFn>): ReturnType<StyoFn>`,
		'',
	])

	return lines.join('\n')
}
